@page "/login"
@using Raketti.Shared
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject Raketti.Client.Services.IAuthService AuthService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<EditForm Model="@user" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<div class="form-group">
		<label for="username">Username</label>
		<InputText id="username" @bind-Value="user.Username" class="form-control" />
		<ValidationMessage For="@(() => user.Username)" />
	</div>
	<div class="form-group">
		<label for="password">Password</label>
		<InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
		<ValidationMessage For="@(() => user.Password)" />
	</div>
	<button type="submit" class="btn btn-primary">Login</button>
	<ValidationSummary />
</EditForm>

@code {
	private AuthInfo user = new AuthInfo();

	public async void HandleLogin()
	{
		var result = await AuthService.Login(user);

		// clear password from memory
		user.Password = null;

		if (result.Success)
		{
			await LocalStorage.SetItemAsync<string>("authToken", result.Data);
			await AuthStateProvider.GetAuthenticationStateAsync();
			NavigationManager.NavigateTo("");
		}
		else
		{
			ToastService.ShowError(result.Message);
		}
	}
}
